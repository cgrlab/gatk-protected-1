package org.broadinstitute.hellbender.tools.exome;

import htsjdk.samtools.metrics.MetricsFile;
import org.apache.commons.lang3.tuple.Pair;
import org.broadinstitute.hellbender.cmdline.Argument;
import org.broadinstitute.hellbender.cmdline.ArgumentCollection;
import org.broadinstitute.hellbender.cmdline.CommandLineProgram;
import org.broadinstitute.hellbender.cmdline.CommandLineProgramProperties;
import org.broadinstitute.hellbender.cmdline.argumentcollections.RequiredVariantInputArgumentCollection;
import org.broadinstitute.hellbender.cmdline.programgroups.VariantProgramGroup;
import org.broadinstitute.hellbender.exceptions.UserException;
import org.broadinstitute.hellbender.tools.exome.orientationbiasvariantfilter.OxoQScorer;
import org.broadinstitute.hellbender.tools.picard.analysis.artifacts.SequencingArtifactMetrics;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;


// TODO:Command line property docs
@CommandLineProgramProperties(
        summary = "",
        oneLineSummary = "",
        programGroup = VariantProgramGroup.class
)
public class FilterByOrientationBias extends CommandLineProgram {

    public static final String PRE_ADAPTER_METRICS_DETAIL_FILE_SHORT_NAME = "P";
    public static final String PRE_ADAPTER_METRICS_DETAIL_FILE_FULL_NAME = "preAdapterDetailFile";
    public static final String ARTIFACT_MODES_SHORT_NAME = "A";
    public static final String ARTIFACT_MODES_FULL_NAME = "artifactModes";


    @ArgumentCollection
    protected static final RequiredVariantInputArgumentCollection VARIANT_ARGUMENTS =
            new RequiredVariantInputArgumentCollection();

    @Argument(
            doc = "PreAdapter Detail metrics file.  Usually, generated by CollectSequencingArtifactMetrics.",
            shortName = PRE_ADAPTER_METRICS_DETAIL_FILE_SHORT_NAME,
            fullName = PRE_ADAPTER_METRICS_DETAIL_FILE_FULL_NAME,
            optional = false)
    protected File preAdapterMetricsFile;

    @Argument(
            doc = "PreAdapter Detail artifacts of interest.  'C>A' for a single artifact.  Separated by commas to assume multiple artifacts at the same time:  'C>A,T>G'  Artifacts must be one base to one base (e.g. 'CC>CA' is illegal)",
            shortName = ARTIFACT_MODES_SHORT_NAME,
            fullName = ARTIFACT_MODES_FULL_NAME,
            optional = true
    )
    protected String artifactModes = "C>A";

    @Override
    protected Object doWork() {

        final MetricsFile<SequencingArtifactMetrics.PreAdapterDetailMetrics, Comparable<?>> mf = new MetricsFile<>();

        try {
            mf.read(new FileReader(preAdapterMetricsFile));
        } catch (final FileNotFoundException fnfe) {
            throw new UserException("Could not find file: " + preAdapterMetricsFile.getAbsolutePath());
        }

        // Get the OxoQ score, which gives an indication of how badly infested the file is.
        final Map<Pair<Character, Character>, Double> oxoQScoreMap = OxoQScorer.scoreOrientationBiasMetricsOverContext(mf.getMetrics());

        final List<Pair<Character, Character>> relevantArtifactModes = new ArrayList<>();
        final String[]  artifactModesAsStrings = artifactModes.split(",");
        for (String artifactMode: artifactModesAsStrings) {
            final String[] splitArtifactMode = artifactMode.split(">");
            relevantArtifactModes.add(Pair.of(splitArtifactMode[0].charAt(0), splitArtifactMode[1].charAt(0)));
        }


        return null;
    }

    private boolean validArtifactMode(final String[] splitArtifactMode) {
        // TODO: Fill this in.
        return true;
    }
}
